import java.util.*;
/************************************************************

	Following is the Binary Tree node structure:

	class BinaryTreeNode<T> {
	    T data;
	    BinaryTreeNode<T> left;
	    BinaryTreeNode<T> right;

	    public BinaryTreeNode(T data) {
	        this.data = data;
	    }
	}

************************************************************/
class pair{
    BinaryTreeNode<Integer> node;
    int num;
    pair(BinaryTreeNode<Integer> _node,int _num)
    {
        node=_node;
        num=_num;
     }
}
public class Solution {
    public static List<List<Integer>> getTreeTraversal(BinaryTreeNode<Integer> root) {
        List<List<Integer>> ans=new ArrayList<>();
        List<Integer> pre=new ArrayList<>();
        List<Integer> in=new ArrayList<>();
        List<Integer> post=new ArrayList<>();
        Stack<pair> st=new Stack<>();
        st.push(new pair(root,1));
        if(root==null)return ans;
        while(!st.empty())
        {
            pair it=st.pop();
            if(it.num==1)
            {
                pre.add(it.node.data);
                it.num++;
                st.push(it);
                if(it.node.left!=null)
                {
                    st.push(new pair(it.node.left,1));
                }
            }
            else if(it.num==2)
            {
                 in.add(it.node.data);
                it.num++;
                st.push(it);
                if(it.node.right!=null)
                {
                    st.push(new pair(it.node.right,1));
                }
            }
            else{
               post.add(it.node.data);
            }
        }
        
        ans.add(in);
        ans.add(pre);
        ans.add(post);
        return ans;
        
        
    }
}
