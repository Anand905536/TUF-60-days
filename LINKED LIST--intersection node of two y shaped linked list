import java.util.* ;
import java.io.*; 

public class Solution {

	public static int findIntersection(LinkedListNode<Integer> firstHead, LinkedListNode<Integer> secondHead) {
		LinkedListNode<Integer> d1=firstHead;
        LinkedListNode<Integer> d2=secondHead;
           while(d1 != d2) {
        d1 = d1 == null? secondHead:d1.next;
        d2 = d2 == null? firstHead:d2.next;
            }
        if(d1!=null)
         return d1.data;
        else return -1;
      
        }
       
	}
  
  
  
  Time Complexity: O(2*max(length of list1,length of list2))

Reason: Uses the same concept of difference of lengths of two lists.

Space Complexity: O(1)

Reason: No extra data structure is used
