 static ArrayList<ArrayList<Integer>>  ans = new ArrayList<ArrayList<Integer>>();
 public static ArrayList<ArrayList<Integer>> ratInAMaze(int[][] maze, int n)
 {     
     int[][]vis = new int[n][n];
        for(int i=0; i<n; i++) {
        for (int j=0; j<n; j++) {
            vis[i][j] = 0;
        }
       }
     if(maze[0][0] == 0 || maze[n-1][n-1] == 0) return ans;
     dfs(0,0, maze, n, vis);
     return ans;
 }
 private static void dfs(int i, int j, int[][] maze, int n, int[][] vis)
 {
     if(i<0 || j<0 || i>=n || j>=n) return;
    if (maze[i][j] == 0 || vis[i][j] == 1) return;
     
       if(i == n-1 && j == n-1) {
        ArrayList<Integer> ints = new ArrayList<Integer>();
           for(int r = 0; r<n; r++) {
               for(int c=0; c<n; c++) {
                   ints.add(vis[r][c]);
               }
           }
          ints.set(n*n-1, 1);
           ans.add(ints);
           return;
       }
     vis[i][j] = 1;
     dfs(i-1, j, maze, n, vis);
      dfs(i+1, j, maze, n, vis);
     dfs(i, j-1, maze, n, vis);
      dfs(i, j+1, maze, n, vis);
     vis[i][j] = 0;
  }
}
